[{"/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/App.tsx":"1","/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/reportWebVitals.ts":"2","/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/Config.tsx":"3","/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/index.tsx":"4","/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/Table.tsx":"5"},{"size":1955,"mtime":1609963315365,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1609524747511,"results":"8","hashOfConfig":"7"},{"size":1210,"mtime":1609571960484,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1609524747511,"results":"10","hashOfConfig":"7"},{"size":12145,"mtime":1609963385449,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"106urmu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/App.tsx",["24","25"],"import * as React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Picker from './Config';\nimport Table from './Table';\n\n\ninterface RealData {\n  types: Map<[a: string], Map<[b: string], number | string>>;\n  values: [{ [n: string]: string | number }];\n}\nasync function getData(): Promise<RealData> {\n  const res = await fetch('./t.json');\n  const data = await res.json();\n  return parseData({\n    types: {\n      location: {\n        location_a: \"Location A\",\n        location_b: \"Location B\",\n        location_c: \"Location C\",\n      },\n      event: {\n        anatomy_and_physiology: \"Anatomy and Physiology\",\n        detector_building: \"Detector Building\",\n        expd: \"Experimental Design\",\n      },\n    }, values: data\n  }); \n  return parseData({\n        values: [\n      { location: \"location_a\", div: \"c\", event: \"anatomy_and_physiology\", year: 2020, url: \"https://drive.google.com\" },\n      { location: \"location_a\", div: \"b\",  event: \"expd\", year: 2021, url: \"https://drive.google.com\" }\n\n    ]\n  });\n}\nasync function parseData(p: any): Promise<RealData> {\n // p.types = new Map(Object.keys(p.types).map(key => [key, new Map(Object.keys(p.types[key]).map(ke => [ke, p.types[key][ke]]))]));\n  // more parsing todo\n  return p;\n}\nclass App extends React.Component {\n  state: any = {\n    types: new Map<string, Map<string, number | string>>(),\n    values: [],\n  };\n\n\n  componentDidMount() {\n    getData().then(data => {\n\n      this.setState({\n        types: data.types,\n        values: data.values,\n      });\n\n    });\n  }\n  reRenderTable(st: { [s: string]: number[] | string[] }) {\n    console.log(\"now\");\n  }\n  render() {\n    console.log(this.state.values)\n    return (\n      <div className=\"App\">\n        {/* <pre>{JSON.stringify(fruits)}</pre> */}\n        {/* <Picker typeconfig={this.state.types} reRender={this.reRenderTable} /> */}\n        <Table data={this.state.values} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/reportWebVitals.ts",[],"/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/Config.tsx",[],"/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/index.tsx",[],"/home/karmanyaahm/Documents/code/soinc/test-react/scioly-tests-app/src/Table.tsx",["26","27","28"],"// @ts-nocheck\n// @ts-ignore\n\n\nimport * as React from 'react';\nimport { Dropdown } from './Config';\nimport styled from 'styled-components';\nimport { useTable, useFilters, useSortBy, useGlobalFilter, useAsyncDebounce, Row, usePagination } from 'react-table';\nimport { Z_BLOCK } from 'zlib';\n// A great library for fuzzy filtering/sorting items\n// import matchSorter from 'match-sorter';\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// Define a default UI for filtering\n\nfunction GlobalFilter({ preGlobalFilteredRows, globalFilter, setGlobalFilter, }) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span>\n            Search:{' '}\n            <input\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n                style={{\n                    fontSize: '1.1rem',\n                    border: '0',\n                }}\n            />\n        </span>\n    )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach(row => {\n            options.add(row.values[id])\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    return (\n        // <div />\n        <Dropdown\n            title={id}\n            selected={filterValue || []}\n            options={options}\n            selectFun={\n                e => {\n                    setFilter(e.map(ee => ee.value) || undefined)\n                }\n            }\n        />\n    )\n}\n\nfunction NumberRangeColumnFilter({\n    column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n            }}\n        >\n            <input\n                value={filterValue[0] || min | ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n                }}\n                placeholder={`Min (${min})`}\n                style={{\n                    width: '70px',\n                    marginRight: '0.5rem',\n                }}\n            />\n      to\n            <input\n                value={filterValue[1] || max || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n                }}\n                placeholder={`Max (${max})`}\n                style={{\n                    width: '70px',\n                    marginLeft: '0.5rem',\n                }}\n            />\n        </div>\n    )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Our table component\nfunction Tablee({ columns, data }) {\n    const filterTypes = React.useMemo(\n        () => ({\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                            .toLowerCase()\n                            .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        []\n    )\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        visibleColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n        pageOptions,\n        page, state: { pageIndex, pageSize },\n        gotoPage,\n        previousPage,\n        nextPage,\n        setPageSize,\n        canPreviousPage,\n        canNextPage, pageCount,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n        },\n        useFilters, // useFilters!\n        useGlobalFilter, // useGlobalFilter!,\n        useSortBy, usePagination,\n\n    )\n\n    // We don't want to render all of the rows for this example, so cap\n    // it for this use case\n\n    return (\n        <>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                    {column.render('Header')}\n                                    <span>\n                                        {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\n                                    </span>\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                    <tr>\n                        <th\n                            colSpan={visibleColumns.length}\n                            style={{\n                                textAlign: 'left',\n                            }}\n                        >\n                            <GlobalFilter\n                                preGlobalFilteredRows={preGlobalFilteredRows}\n                                globalFilter={state.globalFilter}\n                                setGlobalFilter={setGlobalFilter}\n                            />\n                        </th>\n                    </tr>\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <div className=\"pagination\">\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    {'<<'}\n                </button>{' '}\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    {'<'}\n                </button>{' '}\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\n                    {'>'}\n                </button>{' '}\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    {'>>'}\n                </button>{' '}\n                <span>\n                    Page{' '}\n                    <strong>\n                        {pageIndex + 1} of {pageOptions.length}\n                    </strong>{' '}\n                </span>\n                <span>\n                    | Go to page:{' '}\n                    <input\n                        type=\"number\"\n                        defaultValue={pageIndex + 1}\n                        onChange={e => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(page)\n                        }}\n                        style={{ width: '100px' }}\n                    />\n                </span>{' '}\n                <select\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                >\n                    {[10, 25, 50, 250, 500, 999999].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n        </>\n    )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n    return rows.filter(row => {\n        const rowValue = row.values[id]\n        return rowValue >= filterValue\n    })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\nfunction Table(idata: any) {\n    const columns = React.useMemo(() => [\n\n        {\n            Header: () => <span style={{\n                width: \"269px\",\n                display: \"inline-block\",\n            }}>Locations</span>,\n            accessor: 'location',\n            Filter: SelectColumnFilter,\n            filter: 'includesValue',\n        },\n        {\n            Header: 'Year',\n            accessor: 'year',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n        },\n        {\n            Header: 'Event',\n            accessor: 'event',\n            Filter: SelectColumnFilter,\n            filter: 'includesValue',\n        },\n        {\n            Header: 'URL',\n            accessor: 'URL',\n            Cell: props => {\n                // console.log(props)\n                if (props.value)\n                    return <a href={props.value} target=\"_blank\" rel=\"noreferrer noopener\">View test</a>\n                else\n                    return null\n            },\n        },\n{\nHeader: 'Division',\naccessor:'div',\nFilter: SelectColumnFilter,\nfilter: 'includesValue',\n}\n    ], [])\n    // dataa = React.useMemo(() => {\n    //     return idata || [];\n    // }, [])\n    const dataa = idata.data || [];\n    console.log(dataa)\n    return (\n        <Styles>\n            <Tablee columns={columns} data={dataa} />\n        </Styles>\n    )\n}\n\n\nexport default Table;\n",{"ruleId":"29","severity":1,"message":"30","line":4,"column":8,"nodeType":"31","messageId":"32","endLine":4,"endColumn":14},{"ruleId":"33","severity":1,"message":"34","line":29,"column":3,"nodeType":"35","messageId":"36","endLine":35,"endColumn":6},{"ruleId":"29","severity":1,"message":"37","line":8,"column":78,"nodeType":"31","messageId":"32","endLine":8,"endColumn":81},{"ruleId":"29","severity":1,"message":"38","line":9,"column":10,"nodeType":"31","messageId":"32","endLine":9,"endColumn":17},{"ruleId":"29","severity":1,"message":"39","line":208,"column":9,"nodeType":"31","messageId":"32","endLine":208,"endColumn":13},"@typescript-eslint/no-unused-vars","'Picker' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'Row' is defined but never used.","'Z_BLOCK' is defined but never used.","'rows' is assigned a value but never used."]